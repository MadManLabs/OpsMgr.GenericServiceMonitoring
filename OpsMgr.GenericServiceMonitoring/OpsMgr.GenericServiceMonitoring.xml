<?xml version="1.0" encoding="utf-8"?>
<ManagementPack SchemaVersion="2.0" ContentReadable="true" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Manifest>
    <Identity>
      <ID>OpsMgr.GenericServiceMonitoring</ID>
      <Version>1.1.0.0</Version>
    </Identity>
    <Name>OpsMgr.GenericServiceMonitoring</Name>
    <References>
      <Reference Alias="SystemCenter">
        <ID>Microsoft.SystemCenter.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Health">
        <ID>System.Health.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
  <TypeDefinitions>
    <EntityTypes>
      <ClassTypes>
        <ClassType ID="OpsMgr.GenericServiceMonitoring.Classes.MonitoredServices.Class" Base="Windows!Microsoft.Windows.LocalApplication" Accessibility="Public" Abstract="false" Hosted="true" Singleton="false">
          <Property ID="ServiceInternalName" Key="true" Type="string" />
          <Property ID="ServiceDisplayName" Key="false" Type="string" />
        </ClassType>
      </ClassTypes>
    </EntityTypes>
    <ModuleTypes>
      <DataSourceModuleType ID="OpsMgr.GenericServiceMonitoring.Discoveries.GetServicesToMonitor.DataSource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="OverrideValue" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="OverrideValue" Selector="$Config/OverrideValue$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
                <IntervalSeconds>86400</IntervalSeconds>
                <SyncTime></SyncTime>
                <ScriptName>OpsMgr.GenericServiceMonitoring.Scripts.GetServicesToMonitor.Script.ps1</ScriptName>
                <ScriptBody><![CDATA[###########################################################################################
# NAME:			OpsMgr.GenericServiceMonitoring.Scripts.GetServicesToMonitor.Script.ps1
# AUTHOR:		Sebastian Pabst
# CREATED:		29.08.2018
# UPDATE:		11.01.2019
# PARAMETER:	$sourceId,$managedEntityId,$OverrideValue,$computerName
# VERSION:		1.2
# CHANGES:		1.2 Add some logging for better usage
# HISTORY:		1.1 CleanUp script
#				1.0 Initial script creation
###########################################################################################

# Declaration of Parameters
param(
	[string]$sourceId,
	[string]$managedEntityId,
	[string]$OverrideValue,
	[string]$computerName
)

# Declaration of Scriptname
[string]$ScriptName = 'OpsMgr.GenericServiceMonitoring.Scripts.GetServicesToMonitor.Script.ps1'

# Manual Testing section - put stuff here for manually testing script - typically parameters:
# $SourceId = '{00000000-0000-0000-0000-000000000000}'
# $ManagedEntityId = '{00000000-0000-0000-0000-000000000000}'

# Initialization PropertyBag
$API = New-Object -comObject 'MOM.ScriptAPI'
$DiscoveryData = $API.CreateDiscoveryData(0, $sourceId, $managedEntityId)

# Write Start Event to OperationsManager Log
$API.LogScriptEvent($ScriptName,5603,0,"Script is starting!")

# Start Main Script
[array]$ServicesToIngestList = $null
[array]$ServicesToMonitor = $null
[array]$Found = $null
[array]$NotFound = $null

# Check for configured Override.
if ($OverrideValue -eq '') {
	# Write Warning Event to OperationsManager Log 
	$API.LogScriptEvent($ScriptName,5603,2,"No Overridevalue configured. Script will be exited!")
	exit 0
}

# Split the string into Segments
$ServicesToIngest = $OverrideValue.Split(';')

# Setup Custom PS Object
foreach ($ServiceToIngest in $ServicesToIngest) {
    $pscServiceToIngest = New-Object -TypeName psobject
    $pscServiceToIngest | Add-Member -MemberType NoteProperty -Name 'Service' -Value $ServiceToIngest.Split('.')[0]
    $pscServiceToIngest | Add-Member -MemberType NoteProperty -Name 'Include' -Value $ServiceToIngest.Split('.')[1]
    $pscServiceToIngest | Add-Member -MemberType NoteProperty -Name 'Exclude' -Value $ServiceToIngest.Split('.')[2]
    $ServicesToIngestList += $pscServiceToIngest
}

# Check whether a service was found on the local system
foreach ($Service in $ServicesToIngestList) {
	if ($Service.Include -eq '*') {
        $Service.Include = $env:COMPUTERNAME
	}
	if ($env:COMPUTERNAME -in $Service.Include.Split(',')) {
		$CheckService = Get-Service | Where-Object {$_.ServiceName -like $Service.Service} -ErrorAction SilentlyContinue
		if ($CheckService.count -ne 0) {
			if ($env:COMPUTERNAME -notin $Service.Exclude.Split(',')) {
				$ServicesToMonitor += $CheckService
				$ServicesFound += $CheckService.Name + ';'
			}
		}
		else {
			$Error.Remove($Error[0])
			$ServicesNotFound += $Service.Service + ';'
		}
	}
}

#Remove duplicates from Array
$ServicesToMonitor = $ServicesToMonitor | Select-Object -property Name,Displayname -unique

# Creating the DiscoveryData
foreach ($ServiceToMonitor in $ServicesToMonitor) {
	$Instance = $DiscoveryData.CreateClassInstance("$MPElement[Name='OpsMgr.GenericServiceMonitoring.Classes.MonitoredServices.Class']$")
	$Instance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $computerName)
	$Instance.AddProperty("$MPElement[Name='OpsMgr.GenericServiceMonitoring.Classes.MonitoredServices.Class']/ServiceInternalName$", $ServiceToMonitor.Name)
	$Instance.AddProperty("$MPElement[Name='OpsMgr.GenericServiceMonitoring.Classes.MonitoredServices.Class']/ServiceDisplayName$", $ServiceToMonitor.DisplayName)
	$Instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $ServiceToMonitor.DisplayName)
	$DiscoveryData.AddInstance($Instance)
}

# Output of DiscoveryData
$DiscoveryData


# Write Event to OperationsManager Log
if ($ServicesFound.count -eq 0 -and $ServicesNotFound.count -eq 0) {
	$API.LogScriptEvent($ScriptName,5603,0,"`n" + "No Services were discovered or should be discoverd!")
}
elseif ($ServicesFound.count -ne 0 -and $ServicesNotFound.count -eq 0) {
	$API.LogScriptEvent($ScriptName,5603,0,"`n" + "The following Services were discoverd: $ServicesFound!")
}
elseif ($ServicesFound.count -ne 0 -and $ServicesNotFound.count -ne 0) {
	$API.LogScriptEvent($ScriptName,5603,2,"`n" + "The following Services were discoverd: $ServicesFound!" + "`n" + "`n" + "And the following Services should be discoverd: $ServicesNotFound!")
}
elseif ($ServicesFound.count -eq 0 -and $ServicesNotFound.count -ne 0) {
	$API.LogScriptEvent($ScriptName,5603,2,"`n" + "The following Services should be discoverd: $ServicesNotFound!")
}
else {
	$API.LogScriptEvent($ScriptName,5603,1,"`n" + "Ups. Something went wrong.")
}

# Write Event to OperationsManager Log in case of Error
if ($Error.Count -gt 0) {$API.LogScriptEvent($ScriptName,5603,1,"The following Errors occured: $Error")}]]></ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>sourceId</Name>
                    <Value>$MPElement$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>managedEntityId</Name>
                    <Value>$Target/Id$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>computerName</Name>
                    <Value>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>OverrideValue</Name>
                    <Value>$Config/OverrideValue$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>60</TimeoutSeconds>
              </DataSource>
            </MemberModules>
            <Composition>
              <Node ID="DS" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.Discovery.Data</OutputType>
      </DataSourceModuleType>
      <WriteActionModuleType ID="OpsMgr.GenericServiceMonitoring.Tasks.StartGenSerMonIngestion.Task.WriteAction" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="ServiceFilePath" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="ServiceFilePath" Selector="$Config/ServiceFilePath$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="WA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>OpsMgr.GenericServiceMonitoring.Scripts.StartGenSerMonIngestionScript.ps1</ScriptName>
                <ScriptBody><![CDATA[###########################################################################################
# NAME:			OpsMgr.GenericServiceMonitoring.Scripts.StartGenSerMonIngestionScript.ps1
# AUTHOR:		Sebastian Pabst
# CREATED:		30.08.2018
# UPDATE:		11.01.2019
# PARAMETER:	-
# VERSION:		1.1
# CHANGES:		1.1 Add some logging for better usage
# HISTORY:		1.0 Initial script creation
###########################################################################################

# Declaration of Parameters
param(
	[string]$ServiceFilePath
)

# Declaration of Scriptname
[string]$ScriptName = 'OpsMgr.GenericServiceMonitoring.Scripts.StartGenSerMonIngestionScript.ps1'

# Initialization of MOMAPI
$API = New-Object -comObject 'MOM.ScriptAPI'

# Write Start Event to OperationsManager Log
$API.LogScriptEvent($ScriptName,5603,0,"Script is starting!")

# Declaration of Variables
$ManagementPack = Get-SCOMManagementPack -Name 'OpsMgr.GenericServiceMonitoring'
$Discovery = Get-SCOMDiscovery -Name 'OpsMgr.GenericServiceMonitoring.OpsMgr.GenericServiceMonitoring.Discoveries.GetServicesToMonitor.Discovery'
$Target = Get-SCOMClass -Name 'Microsoft.SystemCenter.ManagedComputerServer'

# Test Path of Service CSV
if (!(Test-Path -Path $ServiceFilePath)) {
    $API.LogScriptEvent($ScriptName,5603,1,"ServiceFile not found in $ServiceFilePath! Script will be terminated!")
	exit 0
}

# Configure the Override String
$ServicesToIngest = Import-Csv -Header 'Service','Include','Exclude' -Delimiter ';' -Path $ServiceFilePath

# Delete Override if no Service to watch is configured
If ($ServicesToIngest.count -eq 0) {
    if (($Override = Get-SCOMOverride -Discovery $Discovery).count -gt 0) {
        $ManagementPack = Get-SCOMManagementPack -Name 'OpsMgr.GenericServiceMonitoring'
        $Override = $Override | Where-Object {$_.Name -eq 'OpsMgr.GenericServiceMonitoring.Overrides.SetMonitoredServices.Override'}
        $Override.Status = 'PendingDelete'
        $ManagementPack.Verify()
        $ManagementPack.AcceptChanges()
		$API.LogScriptEvent($ScriptName,5603,0,"No Service is configured to monitor and the configured override was deleted!")
		exit 0
    }
}

# Configure the Override String
[string]$OverrideString = $null

foreach ($ServiceToIngest in $ServicesToIngest) {
    $OverrideString += $ServiceToIngest.Service + '.' + $ServiceToIngest.Include + '.' + $ServiceToIngest.Exclude + ';'
}

# Remove last char from the whole String
$OverrideString = $OverrideString.Substring(0,$OverrideString.Length-1)

# Write information Event to OperationsManager Log
$API.LogScriptEvent($ScriptName,5603,0,"The following String is used for Override:" + "`n" +  $OverrideString)

# Setup the Override
$OverrideName = 'OpsMgr.GenericServiceMonitoring.Overrides.SetMonitoredServices.Override'
$Override = New-Object Microsoft.EnterpriseManagement.Configuration.ManagementPackDiscoveryConfigurationOverride($ManagementPack,$OverrideName)
$Override.Discovery = $Discovery
$Override.Parameter = 'OverrideValue'
$Override.Value = $OverrideString
$Override.Context = $Target
$Override.DisplayName = $OverrideName
$Override.Module = 'DS'

$ManagementPack.Verify()
$ManagementPack.AcceptChanges()

# Write Event to OperationsManager Log in case of Error
if ($Error.Count -gt 0) {
	$API.LogScriptEvent($ScriptName,5603,1,"The following Errors occured: $Error")
}

# Write Success Event to OperationsManager Log
else {
	$API.LogScriptEvent($ScriptName,5603,0,"Script has finished successfully.")
}]]></ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>ServiceFilePath</Name>
                    <Value>$Config/ServiceFilePath$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>60</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="WA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
    </ModuleTypes>
  </TypeDefinitions>
  <Monitoring>
    <Discoveries>
      <Discovery ID="OpsMgr.GenericServiceMonitoring.OpsMgr.GenericServiceMonitoring.Discoveries.GetServicesToMonitor.Discovery" Target="SystemCenter!Microsoft.SystemCenter.ManagedComputerServer" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="OpsMgr.GenericServiceMonitoring.Classes.MonitoredServices.Class">
            <Property TypeID="OpsMgr.GenericServiceMonitoring.Classes.MonitoredServices.Class" PropertyID="ServiceInternalName" />
            <Property TypeID="OpsMgr.GenericServiceMonitoring.Classes.MonitoredServices.Class" PropertyID="ServiceDisplayName" />
          </DiscoveryClass>
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="OpsMgr.GenericServiceMonitoring.Discoveries.GetServicesToMonitor.DataSource">
          <OverrideValue></OverrideValue>
        </DataSource>
      </Discovery>
    </Discoveries>
    <Rules>
      <Rule ID="OpsMgr.GenericServiceMonitoring.OpsMgr.GenericServiceMonitoring.Rules.NotFoundServices.Rule" Target="SystemCenter!Microsoft.SystemCenter.ManagedComputerServer" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">5603</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventLevel</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="Integer">2</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>following Services should be discoverd:</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="OpsMgr.GenericServiceMonitoring.Rules.NotFoundServices.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDisplayNumber$</SuppressionValue>
              <SuppressionValue>$Data/PublisherName$</SuppressionValue>
              <SuppressionValue>$Data/EventLevel$</SuppressionValue>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
    </Rules>
    <Tasks>
      <Task ID="OpsMgr.GenericServiceMonitoring.OpsMgr.GenericServiceMonitoring.Tasks.StartGenSerMonIngestion.Task" Accessibility="Internal" Target="SystemCenter!Microsoft.SystemCenter.ManagementServer" Enabled="true" Timeout="300" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="WA" TypeID="OpsMgr.GenericServiceMonitoring.Tasks.StartGenSerMonIngestion.Task.WriteAction">
          <ServiceFilePath>ServiceFilePath</ServiceFilePath>
        </WriteAction>
      </Task>
    </Tasks>
    <Monitors>
      <UnitMonitor ID="OpsMgr.GenericServiceMonitoring.OpsMgr.GenericServiceMonitoring.Monitors.ServiceWatcher.UnitMonitor" Accessibility="Internal" Enabled="true" Target="OpsMgr.GenericServiceMonitoring.Classes.MonitoredServices.Class" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Windows!Microsoft.Windows.CheckNTServiceStateMonitorType" ConfirmDelivery="false">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="OpsMgr.GenericServiceMonitoring.OpsMgr.GenericServiceMonitoring.Monitors.ServiceWatcher.UnitMonitor.AlertMessage">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/Property[@Name='Name']$</AlertParameter1>
            <AlertParameter2>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</AlertParameter2>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Running" MonitorTypeStateID="Running" HealthState="Success" />
          <OperationalState ID="NotRunning" MonitorTypeStateID="NotRunning" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
          <ServiceName>$Target/Property[Type="OpsMgr.GenericServiceMonitoring.Classes.MonitoredServices.Class"]/ServiceInternalName$</ServiceName>
        </Configuration>
      </UnitMonitor>
    </Monitors>
  </Monitoring>
  <Presentation>
    <Views>
      <View ID="OpsMgr.GenericServiceMonitoring.OpsMgr.GenericServiceMonitoring.Views.ManagementServer.StateView" Accessibility="Internal" Target="SystemCenter!Microsoft.SystemCenter.ManagementServer" TypeID="SystemCenter!Microsoft.SystemCenter.StateViewType" Visible="true">
        <Category>Operations</Category>
        <Presentation>
          <ColumnInfo Index="0" SortIndex="0" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Descending">
            <Name>State</Name>
            <Id>Microsoft.SystemCenter.ManagementServer</Id>
          </ColumnInfo>
          <ColumnInfo Index="1" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>In Maintenance Mode</Name>
            <Id>InMaintenanceMode</Id>
          </ColumnInfo>
          <ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Name</Name>
            <Id>Name</Id>
          </ColumnInfo>
          <ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Path</Name>
            <Id>Path</Id>
          </ColumnInfo>
          <ColumnInfo Index="4" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Display Name</Name>
            <Id>System.Entity/DisplayName</Id>
          </ColumnInfo>
        </Presentation>
      </View>
      <View ID="OpsMgr.GenericServiceMonitoring.OpsMgr.GenericServiceMonitoring.Views.DiscoveredServices.StateView" Accessibility="Internal" Target="OpsMgr.GenericServiceMonitoring.Classes.MonitoredServices.Class" TypeID="SystemCenter!Microsoft.SystemCenter.StateViewType" Visible="true">
        <Category>Operations</Category>
        <Criteria>
          <InMaintenanceMode>false</InMaintenanceMode>
        </Criteria>
        <Presentation>
          <ColumnInfo Index="0" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Descending">
            <Name>State</Name>
            <Id>OpsMgr.GenericServiceMonitoring.Classes.MonitoredServices.Class</Id>
          </ColumnInfo>
          <ColumnInfo Index="1" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>In Maintenance Mode</Name>
            <Id>InMaintenanceMode</Id>
          </ColumnInfo>
          <ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Name</Name>
            <Id>Name</Id>
          </ColumnInfo>
          <ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Path</Name>
            <Id>Path</Id>
          </ColumnInfo>
          <ColumnInfo Index="4" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Display Name</Name>
            <Id>System.Entity/DisplayName</Id>
          </ColumnInfo>
          <ColumnInfo Index="5" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>ServiceInternalName</Name>
            <Id>OpsMgr.GenericServiceMonitoring.Classes.MonitoredServices.Class/ServiceInternalName</Id>
          </ColumnInfo>
          <ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>ServiceDisplayName</Name>
            <Id>OpsMgr.GenericServiceMonitoring.Classes.MonitoredServices.Class/ServiceDisplayName</Id>
          </ColumnInfo>
        </Presentation>
      </View>
    </Views>
    <Folders>
      <Folder ID="OpsMgr.GenericServiceMonitoring.Folders.OpsMgrGenericServiceMonitoring" Accessibility="Internal" ParentFolder="SystemCenter!Microsoft.SystemCenter.Monitoring.ViewFolder.Root" />
    </Folders>
    <FolderItems>
      <FolderItem ElementID="OpsMgr.GenericServiceMonitoring.OpsMgr.GenericServiceMonitoring.Views.ManagementServer.StateView" Folder="OpsMgr.GenericServiceMonitoring.Folders.OpsMgrGenericServiceMonitoring" ID="OpsMgr.GenericServiceMonitoring.OpsMgr.GenericServiceMonitoring.Views.ManagementServer.StateView.FolderItem" />
      <FolderItem ElementID="OpsMgr.GenericServiceMonitoring.OpsMgr.GenericServiceMonitoring.Views.DiscoveredServices.StateView" Folder="OpsMgr.GenericServiceMonitoring.Folders.OpsMgrGenericServiceMonitoring" ID="OpsMgr.GenericServiceMonitoring.OpsMgr.GenericServiceMonitoring.Views.DiscoveredServices.StateView.FolderItem" />
    </FolderItems>
    <StringResources>
      <StringResource ID="OpsMgr.GenericServiceMonitoring.OpsMgr.GenericServiceMonitoring.Monitors.ServiceWatcher.UnitMonitor.AlertMessage" />
      <StringResource ID="OpsMgr.GenericServiceMonitoring.Rules.NotFoundServices.Rule.AlertMessage" />
    </StringResources>
  </Presentation>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="OpsMgr.GenericServiceMonitoring.Classes.MonitoredServices.Class">
          <Name>OpsMgr GenericServiceMonitoring Classes MonitoredServices Class</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="OpsMgr.GenericServiceMonitoring.Classes.MonitoredServices.Class" SubElementID="ServiceInternalName">
          <Name>ServiceInternalName</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="OpsMgr.GenericServiceMonitoring.Classes.MonitoredServices.Class" SubElementID="ServiceDisplayName">
          <Name>ServiceDisplayName</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="OpsMgr.GenericServiceMonitoring.OpsMgr.GenericServiceMonitoring.Discoveries.GetServicesToMonitor.Discovery">
          <Name>OpsMgr GenericServiceMonitoring Discoveries GetServicesToMonitor Discovery</Name>
          <Description>Description for the new discovery.</Description>
        </DisplayString>
        <DisplayString ElementID="OpsMgr.GenericServiceMonitoring.Folders.OpsMgrGenericServiceMonitoring">
          <Name>OpsMgr Generic Service Monitoring</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="OpsMgr.GenericServiceMonitoring">
          <Name>OpsMgr GenericServiceMonitoring</Name>
          <Description>This ManagementPack offers the possibility to monitor generic windows services.</Description>
        </DisplayString>
        <DisplayString ElementID="OpsMgr.GenericServiceMonitoring.OpsMgr.GenericServiceMonitoring.Monitors.ServiceWatcher.UnitMonitor">
          <Name>OpsMgr GenericServiceMonitoring Monitors ServiceWatcher UnitMonitor</Name>
          <Description>Description for the new unit monitor.</Description>
        </DisplayString>
        <DisplayString ElementID="OpsMgr.GenericServiceMonitoring.OpsMgr.GenericServiceMonitoring.Monitors.ServiceWatcher.UnitMonitor.AlertMessage">
          <Name>The monitored service {0} is not running on {1}</Name>
          <Description>The monitored service {0} is not running on {1}</Description>
        </DisplayString>
        <DisplayString ElementID="OpsMgr.GenericServiceMonitoring.OpsMgr.GenericServiceMonitoring.Monitors.ServiceWatcher.UnitMonitor" SubElementID="Running">
          <Name>Running</Name>
          <Description>Running</Description>
        </DisplayString>
        <DisplayString ElementID="OpsMgr.GenericServiceMonitoring.OpsMgr.GenericServiceMonitoring.Monitors.ServiceWatcher.UnitMonitor" SubElementID="NotRunning">
          <Name>NotRunning</Name>
          <Description>NotRunning</Description>
        </DisplayString>
        <DisplayString ElementID="OpsMgr.GenericServiceMonitoring.OpsMgr.GenericServiceMonitoring.Rules.NotFoundServices.Rule">
          <Name>OpsMgr GenericServiceMonitoring Rules NotFoundServices Rule</Name>
          <Description>Description for the new rule</Description>
        </DisplayString>
        <DisplayString ElementID="OpsMgr.GenericServiceMonitoring.Rules.NotFoundServices.Rule.AlertMessage">
          <Name>OpsMgr GenericServiceMonitoring Service not Found</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="OpsMgr.GenericServiceMonitoring.OpsMgr.GenericServiceMonitoring.Tasks.StartGenSerMonIngestion.Task">
          <Name>Start Service Ingestion</Name>
          <Description>Description for the new agent task.</Description>
        </DisplayString>
        <DisplayString ElementID="OpsMgr.GenericServiceMonitoring.OpsMgr.GenericServiceMonitoring.Views.ManagementServer.StateView">
          <Name>Management Server</Name>
          <Description>Description for the new view</Description>
        </DisplayString>
        <DisplayString ElementID="OpsMgr.GenericServiceMonitoring.OpsMgr.GenericServiceMonitoring.Views.DiscoveredServices.StateView">
          <Name>Discovered Services</Name>
          <Description>Description for the new view</Description>
        </DisplayString>
      </DisplayStrings>
      <KnowledgeArticles></KnowledgeArticles>
    </LanguagePack>
  </LanguagePacks>
</ManagementPack>